#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	МесяцРегистрацииСтрокойПриОткрытии();
	КоличествоВыводимых = 0;
	
	Если ПустаяСтрока(КаталогСохраненния) Тогда
		КаталогСохраненния = КаталогДокументов()+"ОтчетыНМУ\";
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область МесяцРегистрации

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда 
		ЭтаФорма.МесяцРегистрацииСтрокой = Формат(Объект.ПериодРегистрации,"ДФ=""ММММ гггг""");	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");	
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Направление,,);	
	Объект.ПериодРегистрации = НачалоМесяца(Объект.ПериодРегистрации);
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзменении()
	
	//Объект.КредитныеДоговора.Очистить();
	//Объект.Итоги.Очистить();
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ВыгрузитьВМММ(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект),
		"Будут отправлены данные в базу МММ по счетам 50, 51, 60, 62"+Символы.ПС+"Продолжить?",
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да,
		"Выгрузить в базу МММ", 
	);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Ответ, ПараметрыВопроса) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Сообщить(Ответ);
	КонецЕсли;
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
	Элементы.Результат,
	ЭтотОбъект,
	"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();

	//////////////////////////////////////////////////////////////
	//
 	СтруктураФоновогоЗадания = ЗапуститьВыполнениеВФоне(УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);		
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	// указываем интервал обновления состояния в секундах, если не указать, 
	// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
	ПараметрыОжидания.Интервал = 3;		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
		Новый ОписаниеОповещения("ФоновоеЗаполненияЗавершено", ЭтотОбъект),
		ПараметрыОжидания
	);	
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыполнениеВФоне(ИдентификаторФормы, Многопоточно = Ложь)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, 
		"мммОтчетОборотыОСВ.СформироватьЭтотОтчет", 
		ПараметрыОтчета, 
		АдресХранилища
	);	
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ФлагТестирования = Истина;
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                       , Организация.ВыгрузитьЗначения());
	ПараметрыОтчета.Вставить("НачалоПериода"                     , НачалоДня(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("КонецПериода"                      , КонецМесяца(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("Склад"                             , Неопределено);
	ПараметрыОтчета.Вставить("НомерОтчета"                       , Неопределено);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения" , Ложь);
	ПараметрыОтчета.Вставить("Тестирование" , ФлагТестирования);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаполненияЗавершено(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		// обрабатываем результат
		
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
		РезультатВыполнения = ОбработатьДанныеНаСервере(Результат.АдресРезультата);
		
		Рез = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		ИмяОрганизации = ?(Организация.Количество()=1, Рез.ИмяОрганизации, "МММ");
		Данные = Рез.ТаблДокумент;
		//ДвоичнДанные = Рез.ДвоичнДанныеВыгрузки;
		МассивОрганизацийСОшибками = Рез.МассивОрганизацийСОшибками;
		Для Каждого Эл Из МассивОрганизацийСОшибками Цикл
			СтрокаСообщения = "ПоОрганизации %1 отчет выполнился с ошибкой";
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Эл);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
		
		
		//Если ПроверитьСуществованиеКаталога(КаталогДокументов()+"\ОтчетыНМУ") = ложь Тогда
		//	СоздатьКаталог(КаталогДокументов()+"\ОтчетыНМУ");
		//ИначеЕсли ПроверитьСуществованиеКаталога(КаталогДокументов()+"\ObmenZatraty") = ложь Тогда
		//	СоздатьКаталог(КаталогДокументов()+"\ObmenZatraty");
		//КонецЕсли;
		
		//ПолноеИмяФайла = КаталогДокументов()+"\ОтчетыНМУ\"+СокрЛП("НМУ_"+ИмяОрганизации)+".xls";
		//Месяц = Формат(КонецМесяца(Объект.ПериодРегистрации),"ДФ=MMMM");
		//ПолноеИмяФайла2 = КаталогДокументов()+"\ObmenZatraty\"+СокрЛП("Zatr_"+ИмяОрганизации+"_"+Месяц)+".CSV";
		//ТаблДокумент.АвтоМасштаб = Истина;

		//Попытка
		//	ТаблДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS97);
		//	ДвоичнДанные.Записать(ПолноеИмяФайла2);
		//	Сообщить("Файл отчета успешно сформирован. Путь к файлу: "+ПолноеИмяФайла);
		//Исключение
		//КонецПопытки;
		
		Для Каждого Д Из Данные Цикл
			ИмяОрганизации = СтрЗаменить(СтрЗаменить(СокрЛП(Д.Ключ),"\","-"),"""","");
			ТабДокумент = Д.Значение.ТабДок;
			ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ТабДокумент.АвтоМасштаб =Истина;	
			//ЭтаФорма.Результат = ТабДокумент;

			
			Если ПроверитьСуществованиеКаталога(КаталогСохраненния) = ложь Тогда
				СоздатьКаталог(КаталогСохраненния);
			КонецЕсли;
			
			ПолноеИмяФайлаXLS =КаталогСохраненния+СокрЛП(Формат(Объект.ПериодРегистрации,"ДФ=yyyy_MM_")+"АС_50_62_"+ИмяОрганизации)+".xls";
			ПолноеИмяФайлаPDF =КаталогСохраненния+СокрЛП(Формат(Объект.ПериодРегистрации,"ДФ=yyyy_MM_")+"АС_50_62_"+ИмяОрганизации)+".PDF";
			
			Попытка
				ТабДокумент.Записать(ПолноеИмяФайлаXLS, ТипФайлаТабличногоДокумента.XLS97);
				ТабДокумент.Записать(ПолноеИмяФайлаPDF, ТипФайлаТабличногоДокумента.PDF);
				Сообщить("Файл отчета успешно сформирован. Путь к файлу: "+ПолноеИмяФайлаXLS);
			Исключение
			КонецПопытки;
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат.Очистить();
	
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища).ТаблДокумент;
	
	сч = 1;
	Для Каждого Д Из Данные Цикл
		Результат.Вывести(Д.Значение.ТабДок);
		сч = сч + 1;
		Если сч > КоличествоВыводимых И НЕ КоличествоВыводимых = 0 Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеНаСервере(АдресРезультата)
	
	ЗагрузитьПодготовленныеДанные();
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресРезультата);
	Возврат РезультатВыполнения;	
	
КонецФункции
