#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МесяцРегистрацииСтрокойПриОткрытии();
	
КонецПроцедуры
#КонецОбласти

#Область СобытияЭлементовФормы
#Область МесяцРегистрации

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда 
		ЭтаФорма.МесяцРегистрацииСтрокой = Формат(Объект.ПериодРегистрации,"ДФ=""ММММ гггг""");	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");	
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Направление,,);	
	Объект.ПериодРегистрации = НачалоМесяца(Объект.ПериодРегистрации);
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзменении()
	
	//Объект.КредитныеДоговора.Очистить();
	//Объект.Итоги.Очистить();
КонецПроцедуры

#КонецОбласти
#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
	Элементы.Результат,
	ЭтотОбъект,
	"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();

	//////////////////////////////////////////////////////////////
	//
 	СтруктураФоновогоЗадания = ЗапуститьВыполнениеВФоне(УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);		
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	// указываем интервал обновления состояния в секундах, если не указать, 
	// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
	ПараметрыОжидания.Интервал = 3;		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
		Новый ОписаниеОповещения("ФоновоеЗаполненияЗавершено", ЭтотОбъект),
		ПараметрыОжидания
	);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ЗапуститьВыполнениеВФоне(ИдентификаторФормы, Многопоточно = Ложь)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	Если Многопоточно Тогда
		ПараметрыПроцедуры = Новый Массив;
		ПараметрыПроцедуры.Добавить(ПараметрыОтчета);
		ПараметрыПроцедуры.Добавить(АдресХранилища);
		с = Новый Соответствие;
		с.Вставить("Параметры", ПараметрыПроцедуры);
		Возврат ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков("мммОтчетЗатратыСервер.СформироватьЭтотОтчет",
			ПараметрыВыполнения,
			с
		);
	Иначе	
		Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, 
			"мммОтчетОСВСервер.СформироватьЭтотОтчет", 
			ПараметрыОтчета, 
			АдресХранилища
		);	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаполненияЗавершено(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		// обрабатываем результат
		
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
		РезультатВыполнения = ОбработатьДанныеНаСервере(Результат.АдресРезультата);
		
		Рез = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		ИмяОрганизации = ?(Организация.Количество()=1, Рез.ИмяОрганизации, "МММ");
		ТаблДокумент = Рез.ТаблДокумент;
		//ДвоичнДанные = Рез.ДвоичнДанныеВыгрузки;
		МассивОрганизацийСОшибками = Рез.МассивОрганизацийСОшибками;
		Для Каждого Эл Из МассивОрганизацийСОшибками Цикл
			СтрокаСообщения = "ПоОрганизации %1 отчет выполнился с ошибкой";
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Эл);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;				
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ОбработатьДанныеНаСервере(АдресРезультата)
	
	ЗагрузитьПодготовленныеДанные();
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресРезультата);
	Возврат РезультатВыполнения;
	
	
	//Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	//Если НЕ Данные = Неопределено Тогда
	//	Объект.Остатки.Очистить();
	//	тз = Объект.Остатки.Выгрузить();
	//	тз.Очистить();
	//	Для Каждого ТекД Из Данные Цикл
	//		Если ТекД.Значение.Статус = "Выполнено" Тогда
	//			Результат = ПолучитьИзВременногоХранилища(ТекД.Значение.АдресРезультата);	
	//			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, тз);			
	//	    КонецЕсли;
	//	КонецЦикла;
	//	тз.Свернуть("Счет, Организация, Счет7", "СуммаОстатка");
	//	Объект.Остатки.Загрузить(тз);
	//КонецЕсли;	
	
КонецФункции	
////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗагрузитьОрганизацииСОшибками(мас)
	
	тз = ОрганизацииСОшибками.Выгрузить();
	тз.Очистить();
	тз.ЗагрузитьКолонку(мас, "Организация");
	тз.ЗаполнитьЗначения(Истина, "Пометка");
	ОрганизацииСОшибками.Загрузить(тз);
	Элементы.ОрганизацииСОшибками.Видимость = Истина;
	
КонецПроцедуры	


&НаСервере
Функция СформироватьОтчетНаСервере()
	
	//Если Не ПроверитьЗаполнение() Тогда 
	//	Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	//КонецЕсли;
	//
	//ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	//
	//ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	//
	//ИдентификаторЗадания = Неопределено;
	//
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	мммОтчетЗатратыСервер.СформироватьЭтотОтчет(ПараметрыОтчета, АдресХранилища);
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресХранилища);
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат.Очистить();
	
	Результат.Вывести(ПолучитьИзВременногоХранилища(АдресХранилища).ТаблДокумент);
	
	//Отчет.НомерОтчета = Отчет.НомерОтчета + 1;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                       , Организация.ВыгрузитьЗначения());
	ПараметрыОтчета.Вставить("Счета"  		                     , ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодСчета));
	ПараметрыОтчета.Вставить("НачалоПериода"                     , НачалоДня(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("КонецПериода"                      , КонецМесяца(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("Склад"                             , Неопределено);
	ПараметрыОтчета.Вставить("НомерОтчета"                       , Неопределено);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения" , Ложь);
	
	//тзО = ОрганизацииСОшибками.Выгрузить();
	//МассивСтрок = тзО.НайтиСтроки(Новый Структура("Пометка", Истина));
	//тзО1 = тзО.Скопировать(МассивСтрок, "Организация");
	//
	//Если Элементы.ОрганизацииСОшибками.Видимость И	тзО1.Количество() Тогда
	//	ПараметрыОтчета.Организация = тзО1.ВыгрузитьКолонку("Организация");
	//КонецЕсли;	
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции




