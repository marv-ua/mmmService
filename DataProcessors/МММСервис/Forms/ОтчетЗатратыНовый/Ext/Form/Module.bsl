#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = ДобавитьМесяц(ТекущаяДатаСеанса(), -1);
	КонецЕсли;	
	
	Затирать = Ложь;
	
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МесяцРегистрацииСтрокойПриОткрытии();
	ПапкаДляСохранения = КаталогДокументов()+"\ObmenZatraty\";
	НеЗатиратьОтправленные = Ложь;
	
КонецПроцедуры
#КонецОбласти

#Область СобытияЭлементовФормы
#Область МесяцРегистрации

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда 
		ЭтаФорма.МесяцРегистрацииСтрокой = Формат(Объект.ПериодРегистрации,"ДФ=""ММММ гггг""");	
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура МесяцРегистрацииСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой");	
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцРегистрацииСтрокой", Направление,,);	
	Объект.ПериодРегистрации = НачалоМесяца(Объект.ПериодРегистрации);
	ПериодРегистрацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцРегистрацииСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПериодРегистрацииПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииПриИзменении()
	
	Очередь.Параметры.УстановитьЗначениеПараметра("ПериодЗатрат", Объект.ПериодРегистрации);
	
	ЗатратыКлиентСервер.ОрганизацияПриИзменении(ЭтаФорма);	
	//Объект.КредитныеДоговора.Очистить();
	//Объект.Итоги.Очистить();
КонецПроцедуры

#КонецОбласти
#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура ОтправитьВыделенные(Команда)
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОтправкиВ7", ЭтотОбъект, Элементы.Очередь.ВыделенныеСтроки),
		"Отправить выделенные строки в 7?",
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Да,
		"Отправить данныые?"
	);	

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизации(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
	Элементы.Результат,
	ЭтотОбъект,
	"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();

	//////////////////////////////////////////////////////////////
	//
 	СтруктураФоновогоЗадания = ЗапуститьВыполнениеВФоне(УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);		
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	// указываем интервал обновления состояния в секундах, если не указать, 
	// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
	ПараметрыОжидания.Интервал = 3;		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания,
		Новый ОписаниеОповещения("ФоновоеЗаполненияЗавершено", ЭтотОбъект),
		ПараметрыОжидания
	);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция ЗапуститьВыполнениеВФоне(ИдентификаторФормы, Многопоточно = Ложь)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьВФоне = Ложь;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	Если Многопоточно Тогда
		ПараметрыПроцедуры = Новый Массив;
		ПараметрыПроцедуры.Добавить(ПараметрыОтчета);
		ПараметрыПроцедуры.Добавить(АдресХранилища);
		с = Новый Соответствие;
		с.Вставить("Параметры", ПараметрыПроцедуры);
		Возврат ДлительныеОперации.ВыполнитьПроцедуруВНесколькоПотоков("ЗатратыСервер.СформироватьЭтотОтчет",
			ПараметрыВыполнения,
			с
		);
	Иначе	
		Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, 
			"ЗатратыСервер.СформироватьЭтотОтчет", 
			ПараметрыОтчета, 
			АдресХранилища
		);	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаполненияЗавершено(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		// обрабатываем результат				
		Кодировка = "windows-1251"; // КодировкаТекста.ANSI;
		РезультатВыполнения = ОбработатьДанныеНаСервере(Результат.АдресРезультата);
		ОбновитьОтображениеДанных();
		Рез = ПолучитьИзВременногоХранилища(АдресХранилища);
		
	//	ИмяОрганизации = ?(Организация.Количество()=1, Рез.ИмяОрганизации, "МММ");
		ТаблДокумент = Рез.ТаблДокумент;
	//	ДвоичнДанные = Рез.ДвоичнДанныеВыгрузки;
	//	ДвоичнДанныеП20 = Рез.ДвоичнДанныеВыгрузкиП20;
	//	ДвоичнДанныеПерс = Рез.ДвоичнДанныеВыгрузкиПерс;
	//
	//	МассивОрганизацийСОшибками = Рез.МассивОрганизацийСОшибками;
	//	Для Каждого Эл Из МассивОрганизацийСОшибками Цикл
	//		СтрокаСообщения = "ПоОрганизации %1 отчет выполнился с ошибкой";
	//		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Эл);
	//		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
	//	КонецЦикла;	
	//	
	//	
	//	Если ПроверитьСуществованиеКаталога(КаталогДокументов()+"\ОтчетыНМУ") = ложь Тогда
	//		СоздатьКаталог(КаталогДокументов()+"\ОтчетыНМУ");
	//	ИначеЕсли ПроверитьСуществованиеКаталога(КаталогДокументов()+"\ObmenZatraty") = ложь Тогда
	//		СоздатьКаталог(КаталогДокументов()+"\ObmenZatraty");
	//	КонецЕсли;
	//	Если НЕ ПроверитьСуществованиеКаталога(КаталогДокументов()+"\ObmenZatraty\Перс") Тогда
	//		СоздатьКаталог(КаталогДокументов()+"\ObmenZatraty\Перс");
	//	КонецЕсли;	
	//	Если НЕ ПроверитьСуществованиеКаталога(КаталогДокументов()+"\ObmenZatraty\П20") Тогда
	//		СоздатьКаталог(КаталогДокументов()+"\ObmenZatraty\П20");
	//	КонецЕсли;
	//	
	//	ПолноеИмяФайла = КаталогДокументов()+"\ОтчетыНМУ\"+Формат(Объект.ПериодРегистрации, "ДФ=гггг_ММ_")+СокрЛП("НМУ_"+ИмяОрганизации)+".xls";
	//	Месяц = Формат(КонецМесяца(Объект.ПериодРегистрации),"ДФ=MMMM");
	//	ПолноеИмяФайла2 = КаталогДокументов()+"\ObmenZatraty\"+Формат(Объект.ПериодРегистрации, "ДФ=гггг_ММ_")+СокрЛП("Zatr_"+ИмяОрганизации)+".CSV";
	//	ПолноеИмяФайла2П20 = КаталогДокументов()+"\ObmenZatraty\П20\"+Формат(Объект.ПериодРегистрации, "ДФ=гггг_ММ_")+СокрЛП("Zatr_"+ИмяОрганизации)+".CSV";
	//	ПолноеИмяФайла2Перс = КаталогДокументов()+"\ObmenZatraty\Перс\"+Формат(Объект.ПериодРегистрации, "ДФ=гггг_ММ_")+СокрЛП("Zatr_"+ИмяОрганизации)+".CSV";
	//	ТаблДокумент.АвтоМасштаб = Истина;

	//	Если ПроверитьСуществованиеФайла(ПолноеИмяФайла2) Тогда
	//		Для сч = 1 По 999 Цикл 
	//			ПолноеИмяФайла2 = Лев(ПолноеИмяФайла2, СтрДлина(ПолноеИмяФайла2)-4)+"("+сч+")" + Прав(ПолноеИмяФайла2,4);
	//			Если НЕ ПроверитьСуществованиеФайла(ПолноеИмяФайла2) Тогда
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;
	//	КонецЕсли;
	//	Если ПроверитьСуществованиеФайла(ПолноеИмяФайла2П20) Тогда
	//		Для сч = 1 По 999 Цикл 
	//			ПолноеИмяФайла2П20 = Лев(ПолноеИмяФайла2П20, СтрДлина(ПолноеИмяФайла2П20)-4)+"("+сч+")" + Прав(ПолноеИмяФайла2П20,4);
	//			Если НЕ ПроверитьСуществованиеФайла(ПолноеИмяФайла2П20) Тогда
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;
	//	КонецЕсли;
	//	Если ПроверитьСуществованиеФайла(ПолноеИмяФайла2Перс) Тогда
	//		Для сч = 1 По 999 Цикл 
	//			ПолноеИмяФайла2Перс = Лев(ПолноеИмяФайла2Перс, СтрДлина(ПолноеИмяФайла2Перс)-4)+"("+сч+")" + Прав(ПолноеИмяФайла2Перс,4);
	//			Если НЕ ПроверитьСуществованиеФайла(ПолноеИмяФайла2Перс) Тогда
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	Удачно = Ложь;
	//	МассивФайлов = новый Массив;
	//	МассивФайлов.Добавить(ПолноеИмяФайла2);
	//	МассивФайлов.Добавить(ПолноеИмяФайла2П20);
	//	МассивФайлов.Добавить(ПолноеИмяФайла2Перс);
	//	
	//	Попытка
	//		ТаблДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS97);
	//		ДвоичнДанные.Записать(ПолноеИмяФайла2);
	//		ДвоичнДанныеП20.Записать(ПолноеИмяФайла2П20);
	//		ДвоичнДанныеПерс.Записать(ПолноеИмяФайла2Перс);
	//		Сообщить("Файл отчета успешно сформирован. Путь к файлу: "+ПолноеИмяФайла);
	//		Удачно = Истина;
	//	Исключение
	//	КонецПопытки;
	//	
	//	Если Удачно Тогда		
	//		//Если Затраты.Количество() > 0 И НЕ Организация.Количество() = 0 Тогда
	//		//	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопрсаОбОчиткеЗатраты", ЭтотОбъект, Новый Структура("Файл", ПолноеИмяФайла2)),
	//		//		"Очистить таблицу затрат?",
	//		//		РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да
	//		//	);
	//		//Иначе
	//			ПослеВопрсаОбОчиткеЗатраты(КодВозвратаДиалога.Да, Новый Структура("Файл", МассивФайлов));
	//		//КонецЕсли;
	//			
	//	КонецЕсли;	
		
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьСуществованиеФайла(ЛокПолноеИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ЛокПолноеИмяФайла);		
	Возврат ВыбФайл.Существует();
	
КонецФункции 

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Текст = НСтр("uk = 'Розмір файлу %1 байт'; ru = 'Размер файла %1 байт""'");
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ПомещаемыйФайл.Размер());
    Состояние("Файл " + ПомещаемыйФайл.Имя, Помещено, Текст, БиблиотекаКартинок.Документ);
КонецПроцедуры
		

&НаСервере
Функция ОбработатьДанныеНаСервере(АдресРезультата)

	ПериодРегистрацииПриИзменении();
	
	ЗагрузитьПодготовленныеДанные();
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресРезультата);
	
	Возврат РезультатВыполнения;
	
	
	//Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	//Если НЕ Данные = Неопределено Тогда
	//	Объект.Остатки.Очистить();
	//	тз = Объект.Остатки.Выгрузить();
	//	тз.Очистить();
	//	Для Каждого ТекД Из Данные Цикл
	//		Если ТекД.Значение.Статус = "Выполнено" Тогда
	//			Результат = ПолучитьИзВременногоХранилища(ТекД.Значение.АдресРезультата);	
	//			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, тз);			
	//	    КонецЕсли;
	//	КонецЦикла;
	//	тз.Свернуть("Счет, Организация, Счет7", "СуммаОстатка");
	//	Объект.Остатки.Загрузить(тз);
	//КонецЕсли;	
	
КонецФункции	
////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	мммОтчетЗатратыСервер.СформироватьЭтотОтчет(ПараметрыОтчета, АдресХранилища);
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресХранилища);
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат.Очистить();
	
	Результат.Вывести(ПолучитьИзВременногоХранилища(АдресХранилища).ТаблДокумент);
	
	//Отчет.НомерОтчета = Отчет.НомерОтчета + 1;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ТолькоДанныеВыгрузки"				 , ТолькоДанныеВыгрузки);
	ПараметрыОтчета.Вставить("Организация"                       , Организация.ВыгрузитьЗначения());
	ПараметрыОтчета.Вставить("НачалоПериода"                     , НачалоДня(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("КонецПериода"                      , КонецМесяца(Объект.ПериодРегистрации));
	ПараметрыОтчета.Вставить("Склад"                             , Неопределено);
	ПараметрыОтчета.Вставить("НомерОтчета"                       , Неопределено);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения" , Ложь);
	ПараметрыОтчета.Вставить("НеЗатиратьОтправленные" , НеЗатиратьОтправленные);
	
	//тзО = ОрганизацииСОшибками.Выгрузить();
	//МассивСтрок = тзО.НайтиСтроки(Новый Структура("Пометка", Истина));
	//тзО1 = тзО.Скопировать(МассивСтрок, "Организация");
	//
	//Если Элементы.ОрганизацииСОшибками.Видимость И	тзО1.Количество() Тогда
	//	ПараметрыОтчета.Организация = тзО1.ВыгрузитьКолонку("Организация");
	//КонецЕсли;	
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросОтправкиВ7(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		мммЗатратыКлиент.ОтправитьДанныев7(ДопПараметры, ЭтаФорма, Элементы);
		ПериодРегистрацииПриИзменении();
		ОбновитьОтображениеДанных();		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ОчередьКоманда" ИЛИ Элемент.ТекущийЭлемент.Имя = "ОчередьСтатус" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОтправкиВ7", ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Очередь.ТекущиеДанные)),
			"Отправить данные в 7?",
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			"Отправить данныые?"
		);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчередьСтатусНажатие(Элемент, СтандартнаяОбработка)
	

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПериодРегистрацииПриИзменении();
	ОбновитьОтображениеДанных();	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеОтправленные(Команда)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Очередь, "Статус", 1, ВидСравненияКомпоновкиДанных.НеРавно,, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Очередь, "Статус");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗатратыКлиентСервер.ОрганизацияПриИзменении(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеСтатусыНаСервере()
	Набор = РегистрыСведений.ДанныеКВыгрузкеВ7.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(Объект.ПериодРегистрации);
	Набор.Прочитать();
	тз = Набор.Выгрузить();
	тз.ЗаполнитьЗначения("", "Комментарий,ОшибкаВыгрузки");
	тз.ЗаполнитьЗначения(ЗатратыКлиентСервер.СтатусОтправки_НеОтправлено(), "Статус");
	Набор.Загрузить(тз);
	Набор.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеСтатусы(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОчиститьВсеСтатусы", ЭтотОбъект), "Очистить все статусы?", РежимДиалогаВопрос.ДаНет, ,);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОчиститьВсеСтатусы(Ответ, ДопПарам) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьВсеСтатусыНаСервере();

	КонецЕсли;	
КонецПроцедуры
	



