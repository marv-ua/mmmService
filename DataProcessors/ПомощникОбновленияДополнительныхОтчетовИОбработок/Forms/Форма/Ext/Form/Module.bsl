
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Попытка
        СохраненнаяТЗ = ЗначениеИзСтрокиВнутр(Настройки["ОбъектИнформационныеБазы"]);
        Объект.ИнформационныеБазы.Загрузить(СохраненнаяТЗ);
    Исключение
    КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	Настройки.Вставить("ОбъектИнформационныеБазы", ЗначениеВСтрокуВнутр(Объект.ИнформационныеБазы.Выгрузить(,"НаименованиеИБ,СтрокаСоединения")));
КонецПроцедуры

&НаКлиенте
Процедура ИнформационныеБазыПриИзменении(Элемент)
	ДляВызоваОбработчикаСохраненияНастроек = ДляВызоваОбработчикаСохраненияНастроек + 1;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуСоединения(СтрокаТабличнойЧастиИнформационныеБазы)
	
	СтрокаСоединения = СтрокаТабличнойЧастиИнформационныеБазы.СтрокаСоединения;
	
	//СтрокаСоединенияФайловыйВариант = File="C:\Базы1С\ЗУП";
	//СтрокаСоединенияСерверныйВариант = Srvr="SQL-777";Ref="Account777";
			
	Если ЗначениеЗаполнено(Объект.ИмяПользователя) Тогда
		СтрокаСоединения = СтрокаСоединения + "Usr=" + Объект.ИмяПользователя + ";Pwd=" + Объект.ПарольПользователя;
	КонецЕсли;	 	
	
	//СтрокаСоединения = File="C:\Базы1С\ЗУП";Usr=ПупкинПантилемонПрокопович;Pwd=1
	
	Возврат СтрокаСоединения;
	
КонецФункции	
	
&НаСервере
Функция УстановитьВнешнееСоединениеСБазой(СтрокаТабличнойЧастиИнформационныеБазы)
	
	СтрокаСоединения = ПолучитьСтрокуСоединения(СтрокаТабличнойЧастиИнформационныеБазы);
		
	V8 = Новый COMObject("V83.COMConnector");
	Соединение = V8.Connect(СтрокаСоединения);
	Возврат Соединение;
	
КонецФункции	

&НаСервере
Процедура ПроверитьСоединениеНаСервере()
		
	Для Каждого ТекущаяСтрока ИЗ Элементы.ИнформационныеБазы.ВыделенныеСтроки Цикл
		
		Попытка 
			
			РезультатПроверкиСоединения = Новый Структура;
			РезультатПроверкиСоединения.Вставить("Успех",Ложь);
			РезультатПроверкиСоединения.Вставить("Результат","Неопределен");
					
			СтрокаТабличнойЧастиИнформационныеБазы = объект.ИнформационныеБазы.НайтиПоИдентификатору(ТекущаяСтрока);
			СтрокаТабличнойЧастиИнформационныеБазы.Успех = Ложь;
			СтрокаТабличнойЧастиИнформационныеБазы.Результат = "";
									
			Соединение = УстановитьВнешнееСоединениеСБазой(СтрокаТабличнойЧастиИнформационныеБазы);
						
		Исключение
			
			СтрокаТабличнойЧастиИнформационныеБазы.Результат = ОписаниеОшибки();
			Продолжить;
			
		КонецПопытки;
		
		Попытка
			Структура = Соединение.Пользователи.СвойстваПользователяИБ(Соединение.ПользователиКлиентСервер.ТекущийПользователь().ИдентификаторПользователяИБ);
			СтрокаТабличнойЧастиИнформационныеБазы.Результат = "Соединение установлено, пользователь: " + Структура.Имя;
			СтрокаТабличнойЧастиИнформационныеБазы.Успех = Истина;
		Исключение
			СтрокаТабличнойЧастиИнформационныеБазы.Результат = "Соединение установлено, пользователя определить не удалось";
		КонецПопытки;	
		
	КонецЦикла;
		
	//В результате установки такого соединения начинает исполняться модуль внешнего соединения базы. 
	//В случае файловой базы код на встроенном языке исполняется на том компьютере, на котором создается объект V83.COMConnector (и в контексте клиента, и в контексте сервера).
	//В случае клиент-серверной информационной базы код в контексте клиента исполняется на том компьютере, где создается COM-объект V83.COMConnector , 
	//а код в контексте сервера исполняется на компьютере кластера серверов.
	
КонецПроцедуры

&НаКлиенте
Функция СтрокиВыделены()
	
	Если Элементы.ИнформационныеБазы.ВыделенныеСтроки.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нужно выделить хотябы одну строку!";
		Сообщение.Поле = "Объект.ИнформационныеБазы";
		Сообщение.Сообщить();
		Возврат ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	
	Если Не СтрокиВыделены() Тогда 
		Возврат;
	КонецЕсли;	
		
	ПроверитьСоединениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбработкуНаСервере(ПараметрыПроцедуры)
	
	Попытка
		
		ИмяФайлаВнешнейОбработки = ПараметрыПроцедуры.ИмяФайлаВнешнейОбработки;
		
		СтрокаТабличнойЧастиИнформационныеБазы = объект.ИнформационныеБазы.НайтиПоИдентификатору(ПараметрыПроцедуры.ТекущаяСтрока);
		СтрокаТабличнойЧастиИнформационныеБазы.Успех = Ложь;
		СтрокаТабличнойЧастиИнформационныеБазы.Результат = "";
		
		Соединение = УстановитьВнешнееСоединениеСБазой(СтрокаТабличнойЧастиИнформационныеБазы);
		
		ПараметрыРегистрации = Соединение.NewObject("Структура");
		ПараметрыРегистрации.Вставить("Успех", Ложь);
		
		Ключи = Соединение.NewObject("Структура","ИмяФайла, ЭтоОтчет, ОтключатьПубликацию, ОтключатьКонфликтующие, Конфликтующие");
		Соединение.ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыРегистрации, Ключи, Ложь);
		
		ПараметрыРегистрации.ОтключатьПубликацию = Ложь;
		ПараметрыРегистрации.ОтключатьКонфликтующие = Ложь;
		ПараметрыРегистрации.Конфликтующие = Соединение.NewObject("СписокЗначений");
		
		РасширениеФайла = ВРег(Прав(ИмяФайлаВнешнейОбработки, 3));
		
		Если РасширениеФайла = "ERF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = Истина;
		ИначеЕсли РасширениеФайла = "EPF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = Ложь;
		Иначе
			ПараметрыРегистрации.Успех = Ложь;
			ТекстПредупреждения = НСтр("ru = 'Расширение файла не соответствует расширению внешнего отчета (ERF) или обработки (EPF).'");
			ВызватьИсключение ТекстПредупреждения;
		КонецЕсли;
		
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДвоичныхДанныхФайлаВХранилище);
		
		СтрокаBase64 = Base64Строка(ДвоичныеДанныеОбработки);
		
		ПараметрыВБазеПриемнике = Соединение.NewObject("Структура");
		ПараметрыВБазеПриемнике.Вставить("СтрокаBase64", СтрокаBase64);
		ПараметрыВБазеПриемнике.Вставить("ДвоичныеДанныеОбработки", "");
		
		Соединение.ОбщегоНазначения.ВыполнитьВБезопасномРежиме("Параметры.ДвоичныеДанныеОбработки = Base64Значение(Параметры.СтрокаBase64)", ПараметрыВБазеПриемнике);
						
		УникальныйИдентификаторДляХранилища = Соединение.NewObject("УникальныйИдентификатор");
		ПараметрыВБазеПриемнике.Вставить("УникальныйИдентификатор", УникальныйИдентификаторДляХранилища);
		ПараметрыВБазеПриемнике.Вставить("АдресДанныхОбработки", "");
		
		Соединение.ОбщегоНазначения.ВыполнитьВБезопасномРежиме("Параметры.АдресДанныхОбработки = ПоместитьВоВременноеХранилище(Параметры.ДвоичныеДанныеОбработки,Параметры.УникальныйИдентификатор)", ПараметрыВБазеПриемнике);
		
		ПараметрыРегистрации.Вставить("АдресДанныхОбработки", ПараметрыВБазеПриемнике.АдресДанныхОбработки);
		
		ПараметрыРегистрации.ИмяФайла = ИмяФайлаВнешнейОбработки;
		
		Запрос = Соединение.NewObject("Запрос");
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
		|ГДЕ
		|	ДополнительныеОтчетыИОбработки.ИмяОбъекта = &ИмяОбъекта
		|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
		|	И ДополнительныеОтчетыИОбработки.Публикация <> ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)";
		
		Запрос.УстановитьПараметр("ИмяОбъекта", Объект.ИмяОбъекта);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ВызватьИсключение "В справочнике ДополнительныеОтчетыИОбработки отсутсвует обработка/отчет с именем " + Объект.ИмяОбъекта;
		КонецЕсли;	
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Следующий() Тогда
			ВызватьИсключение "В справочнике ДополнительныеОтчетыИОбработки зарегестрировано более 2-х обработка/отчет с именем " + Объект.ИмяОбъекта;
		КонецЕсли;
		
		РезультатРегистрации = Соединение.ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(ОбъектСправочника, ПараметрыРегистрации);
		
		Соединение.ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыРегистрации, РезультатРегистрации, Истина);
		
		ОбъектСправочника.ХранилищеОбработки = Соединение.NewObject("ХранилищеЗначения",ПараметрыВБазеПриемнике.ДвоичныеДанныеОбработки, Соединение.NewObject("СжатиеДанных",9));
		
		Если ПараметрыРегистрации.Успех Тогда
			ОбъектСправочника.Записать();
			ОповещениеЗаголовок = ?(ПараметрыРегистрации.ЭтоОтчет, НСтр("ru = 'Файл внешнего отчета загружен'"), НСтр("ru = 'Файл внешней обработки загружен'"));
			
			СтрокаТабличнойЧастиИнформационныеБазы.Успех = Истина;
			СтрокаТабличнойЧастиИнформационныеБазы.Результат = ОповещениеЗаголовок;
			
		Иначе
			ВызватьИсключение ПараметрыРегистрации.ТекстОшибки;
		КонецЕсли;
		
	Исключение
		
		СтрокаТабличнойЧастиИнформационныеБазы.Результат = ОписаниеОшибки();
		
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбработку(Команда)
	
	Если Не СтрокиВыделены() Тогда 
		Возврат;
	КонецЕсли;	
	
	ФайлВнешнейОбработки = Новый Файл(Объект.ПутьКФайлуОбработки);
	
	Если НЕ ФайлВнешнейОбработки.Существует() Тогда
		Предупреждение("Не корректный ПутьКФайлуОбработки");
		Возврат;
	КонецЕсли;
	
	ИмяФайлаВнешнейОбработки = ФайлВнешнейОбработки.Имя;
	
	ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(Объект.ПутьКФайлуОбработки);
	
	АдресДвоичныхДанныхФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки, УникальныйИдентификатор);
			
	Для Каждого ТекущаяСтрока ИЗ Элементы.ИнформационныеБазы.ВыделенныеСтроки Цикл
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ИмяФайлаВнешнейОбработки",ИмяФайлаВнешнейОбработки);
		ПараметрыПроцедуры.Вставить("ТекущаяСтрока",ТекущаяСтрока);
		
		ОбновитьОбработкуНаСервере(ПараметрыПроцедуры);
	
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПараметрыСохранения(ПараметрыПроцедуры)
			
	ПараметрыПроцедуры.Вставить("ТЗКакСтрока",ЗначениеВСтрокуВнутр(Объект.ИнформационныеБазы.Выгрузить()));
			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьТаблицуВФайл(Команда)
	
	ПараметрыПроцедуры = Новый Структура;
	
	СоздатьПараметрыСохранения(ПараметрыПроцедуры); 
		
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ПараметрыПроцедуры.ТЗКакСтрока);
		
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогРаботыСФайлом = Новый ДиалогВыбораФайла(Режим);
	Фильтр = НСтр("ru = 'Служебный'; en = 'Text'")
	+ "(*.tz)|*.tz";
	ДиалогРаботыСФайлом.Фильтр = Фильтр;
	ДиалогРаботыСФайлом.Заголовок = "Выберите файл";
	Если ДиалогРаботыСФайлом.Выбрать() Тогда
		Текст.Записать(ДиалогРаботыСФайлом.ПолноеИмяФайла);
		Сообщить("Файл сохранен: " + ДиалогРаботыСФайлом.ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуИзФайлаНаСервере(ТЗКакСтрока)
	
	Объект.ИнформационныеБазы.Загрузить(ЗначениеИзСтрокиВнутр(ТЗКакСтрока));
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТаблицуИзФайла(Команда)
	
	ПараметрыПроцедуры = Новый Структура;
			
	Текст = Новый ТекстовыйДокумент;
			
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогРаботыСФайлом = Новый ДиалогВыбораФайла(Режим);
	Фильтр = НСтр("ru = 'Служебный'; en = 'Text'")
	+ "(*.tz)|*.tz";
	ДиалогРаботыСФайлом.Фильтр = Фильтр;
	ДиалогРаботыСФайлом.Заголовок = "Выберите файл";
	Если ДиалогРаботыСФайлом.Выбрать() Тогда
		Текст.Прочитать(ДиалогРаботыСФайлом.ПолноеИмяФайла);
		ТЗКакСтрока = Текст.ПолучитьТекст();
		ЗагрузитьТаблицуИзФайлаНаСервере(ТЗКакСтрока);
	КонецЕсли;
	
	ДляВызоваОбработчикаСохраненияНастроек = ДляВызоваОбработчикаСохраненияНастроек + 1; // чтоб вызывался обработчик сохранения настроек

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПарольПриИзменении(Элемент)
	Элементы.ПарольПользователя.РежимПароля = НЕ ПоказатьПароль;
КонецПроцедуры

#Область ИспользуемыеМатериалы

// Отсюда взят функцилнал по подключению обработки:
// Справочник.ДополнительныеОтчетыИОбработки.ФормаЭлемента

// Отсюда взят кусок по получению имени внешнего отчета из файла:
// ДополнительныеОтчетыИОбработки.ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, ПараметрыРегистрации, РезультатРегистрации)

#КонецОбласти	
