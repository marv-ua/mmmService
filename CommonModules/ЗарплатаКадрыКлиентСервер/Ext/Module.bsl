
#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет количество дней в месяце.
//
// Параметры:
//	Дата - любая дата месяца
//
// Возвращаемое значение
//	- число, количество дней в месяце
//
Функция КоличествоДнейМесяца(Дата) Экспорт
	Возврат День(КонецМесяца(Дата));
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для гражданства.
//
// Параметры:
//	ИнформацияОГражданстве - объект, имеющий свойства.
//		Страна
//		
Функция ГражданствоПоУмолчанию(ИнформацияОГражданстве) Экспорт
	
	Возврат ИнформацияОГражданстве.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Украина");
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для сведений об инвалидности
// т.е. сотрудник не является инвалидом.
//
// Параметры:
//	СведенияОбИнвалидности - объект, имеющий свойства.
//		Инвалидность
//		СрокДействияСправки
//		
Функция СведенияОбИнвалидностиПоУмолчанию(СведенияОбИнвалидности) Экспорт
	Возврат (НЕ СведенияОбИнвалидности.Инвалидность)
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.СрокДействияСправки))
КонецФункции
	
// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для сведений о пенсионерах
// т.е. сотрудник не является пенсионером.
//
// Параметры:
//	СведенияОПенсионерах - объект, имеющий свойства.
//		Пенсионер
//		
Функция СведенияОПенсионерахПоУмолчанию(СведенияОПенсионерах) Экспорт
	Возврат (НЕ СведенияОПенсионерах.Пенсионер)
		И (НЕ ЗначениеЗаполнено(СведенияОПенсионерах.СвидетельствоДатаВыдачи))
КонецФункции
	

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для сведений о дополнительных гарантиях физического лица.
//
// Параметры:
//	СведенияОДополнительныхГарантиях - объект, имеющий свойства.
//		НаличиеГарантий
//		ВидГарантии
//		
Функция СведенияОЛицахСДополнительнымиГарантиямиПоУмолчанию(СведенияОЛицахСДополнительнымиГарантиями) Экспорт
	Возврат (НЕ СведенияОЛицахСДополнительнымиГарантиями.НаличиеГарантий)
	    И (НЕ ЗначениеЗаполнено(СведенияОЛицахСДополнительнымиГарантиями.ВидГарантии))
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для удостоверения личности.
//
// Параметры:
//	ИнформацияОбУдостоверенииЛичности - объект, имеющий свойства 
//		ВидДокумента.
//		Серия
//		Номер
//		ДатаВыдачи
//		КемВыдан
//		
Функция УдостоверениеЛичностиПоУмолчанию(ИнформацияОбУдостоверенииЛичности) Экспорт
	
	Возврат (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ВидДокумента))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Серия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Номер))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.СрокДействия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КемВыдан));
		
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для бухучета сотрудника.
//
// Параметры:
//	БухучетЗарплатыСотрудников - объект, имеющий свойства 
//		СпособОтраженияЗарплатыВБухучете
//		ОтношениеКЕНВД.
//		
Функция СведенияОБухучетеСотрудникаПоУмолчанию(БухучетЗарплатыСотрудников) Экспорт
	Возврат (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете))
		И (НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.СтатьяФинансирования));
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Заполняет реквизит представлением месяца, хранящегося в другом реквизите.
//
// Параметры:
//		РедактируемыйОбъект
//		ПутьРеквизита - Строка, путь к реквизиту, содержащего дату.
//		ПутьРеквизитаПредставления - Строка, путь к реквизиту в который помещается представление месяца.
//
Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

// Заполняет реквизиты представления месяцев, хранящихся в других реквизитах.
//
// Параметры:
//		ДанныеТабличнойЧасти - коллекция строк табличной части.
//		ПутьРеквизита - Строка, путь к реквизиту, содержащего дату.
//		ПутьРеквизитаПредставления - Строка, путь к реквизиту в который помещается представление месяца.
//
Процедура ЗаполнитьМесяцПоДатеВТабличнойЧасти(ДанныеТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт
	Для Каждого СтрокаТабличнойЧасти Из ДанныеТабличнойЧасти Цикл
		ЗаполнитьМесяцПоДате(СтрокаТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления);
	КонецЦикла;
КонецПроцедуры

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца, КодЯзыка = "") Экспорт
	
    Если КодЯзыка = "" Тогда 
		Возврат Формат(ДатаНачалаМесяца, "Л="+ЛокализацияПовтИсп.КодЯзыкаИнтерфейса()+";ДФ='ММММ гггг'");
	Иначе
		Возврат Формат(ДатаНачалаМесяца, "Л="+КодЯзыка+";ДФ='ММММ гггг'");
	КонецЕсли;	
	
КонецФункции

// Возвращает представление квартала по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеКвартала(ДатаНачалаМесяца) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачалаМесяца) Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат ПредставлениеПериода(ДатаНачалаМесяца, КонецКвартала(ДатаНачалаМесяца), "ФП = Истина");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Проверка заполнения свойств.

// Проверяет заполнение реквизитов переданного объекта по заданным правилам.
// 
// Параметры:
//	ПроверяемыйОбъект	- проверяемое, любой объект, допускающий доступ к полям по имени.
//	ПравилаПроверки		- структура, в которой ключем является проверяемое свойство, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю.
//								
//	Возвращаемое значение:
//		Булево. Истина - ошибок не обнаружено, Ложь - в противном случае. 
//			
Функция СвойстваЗаполнены(ПроверяемыйОбъект, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		Если НЕ ЗначениеЗаполнено(ПроверяемыйОбъект[ПравилоПроверки.Ключ]) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Значение, ПроверяемыйОбъект, НарушенноеПравило.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам.
// 
// Параметры:
//	Форма			- управляемая форма.
//	ПравилаПроверки	- список значение, в которой значением является путь к данными, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю.
//								
//	Возвращаемое значение:
//		Булево. Истина - все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваФормыЗаполнены(Форма, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПравилоПроверки.Значение);
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Представление, , НарушенноеПравило.Значение);
		КонецЦикла
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Математические функции

// Округляет число до заданной точности по указанному правилу.
//
// Параметры:
//  Число                   - число, число которое необходимо округлить.
//  Точность        		- число, "базис" до которого нужно округлить заданное число.
//  Правило 				- перечисление "ПравилаОкругленияПриРасчетеЗарплаты".
//
// Возвращаемое значение:
// Число - округленное до заданной точности значение.
//
Функция Округлить(Число, Точность = 0, Правило = Неопределено) Экспорт
	
	// Если надо округлить 0 или точность не задана, то возвращаем заданное число.
	Если Не ЗначениеЗаполнено(Число) 
		Или Точность <= 0 Тогда
		Возврат Число
	КонецЕсли;
	
	Множитель  		= Число / Точность;
	ЦелыйМножитель 	= Цел(Множитель);
	
	Если Множитель = ЦелыйМножитель Тогда
		Результат = Число;
	Иначе
		Результат = Точность * Окр(Множитель);
		
		Если Правило = ПредопределенноеЗначение("Перечисление.ПравилаОкругленияПриРасчетеЗарплаты.ВБольшуюСторону") Тогда
			Результат = Точность * (ЦелыйМножитель + 1);
		ИначеЕсли Правило = ПредопределенноеЗначение("Перечисление.ПравилаОкругленияПриРасчетеЗарплаты.ВМеньшуюСторону") Тогда
			Результат = Точность * ЦелыйМножитель;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расшифровка рег.отчетности

// По переданному имени показателя регламентированного отчета определяет
// раздел отчета, которому принадлежит показатель.
// 
// Параметры:
//	ИмяПоказателя - Строка
//								
//	Возвращаемое значение:
//		Строка описания (из 2 символов) раздела отчета или Неопределено,  
//		если переданное ИмяПоказателя не имеет ожидаемой структуры.	
//			
Функция РазделРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 5, 2)
	
КонецФункции

// По переданному имени показателя регламентированного отчета определяет
// номер строки таблицы отчета, в которой расположен показатель.
// 
// Параметры:
//	ИмяПоказателя - Строка
//								
//	Возвращаемое значение:
//		Строка описания (номер из 3 символов) строки таблицы отчета или 
//		Неопределено, если переданное ИмяПоказателя не имеет ожидаемой структуры.	
//			
Функция СтрокаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 9, 3)
	
КонецФункции

// По переданному имени показателя регламентированного отчета определяет
// номер колонки таблицы отчета, в которой расположен показатель.
// 
// Параметры:
//	ИмяПоказателя - Строка
//								
//	Возвращаемое значение:
//		Строка описания (номер из 2 символов) колонки таблицы отчета или  
//		Неопределено, если переданное ИмяПоказателя не имеет ожидаемой структуры.	
//			
Функция КолонкаРегламентированногоОтчетаПоИмениПоказателя(ИмяПоказателя) Экспорт
	
	Если ВРег(Лев(ИмяПоказателя,1)) <> "П" Или СтрДлина(ИмяПоказателя) < 13 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Возврат Сред(ИмяПоказателя, 12, 2)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет итогов в документах

// Возвращает структуру, описывающую реквизит по которому рассчитывается итог табличной части.
//
// Параметры:
//		ИмяРеквизита
//		Пояснение - Строка, используется при формировании расшифровки составляющей итоговой суммы.
//
// Возвращаемое значение:
//		Структура
//			* ИмяРеквизита
//			* Пояснение
//
Функция ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита(ИмяРеквизита, Пояснение) Экспорт
	
	Возврат Новый Структура("ИмяРеквизита,Пояснение", ИмяРеквизита, Пояснение);
	
КонецФункции

// Возвращает структуру, описывающую табличную часть для расчета итогов.
//
// Параметры:
//		ПутьКДанным
//		ОписанияРеквизитов - Массив описаний реквизитов, см.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита.
//
// Возвращаемое значение:
//		Структура
//			* ПутьКДанным
//			* ОписанияРеквизитов
//
Функция ИтогиТабличныхЧастейОписаниеТабличнойЧасти(ПутьКДанным, ОписанияРеквизитов) Экспорт
	
	Возврат Новый Структура("ПутьКДанным,ОписанияРеквизитов", ПутьКДанным, ОписанияРеквизитов);
	
КонецФункции

// Заполняет значение реквизита, содержащего итоговую сумму по табличным частям формы. Устанавливает
// подсказку с расшифровкой полученного итога.
//
// Параметры:
//		Форма
//		ИмяРеквизитаИтог
//		КоллекцияИтогов - Массив описаний табличных частей по которым рассчитывается итог
//						см.ИтогиТабличныхЧастейОписаниеТабличнойЧасти.
//
Процедура ИтогиТабличныхЧастейРассчитатьИтог(Форма, ИмяРеквизитаИтог, КоллекцияИтогов) Экспорт
	
	Итог = 0;
	ТекстПодсказки = "";
	
	СписокПодсказок = Новый СписокЗначений;
	МаксимальнаяДлиннаПояснения = 0;
	МаксимальнаяДлиннаПредставлениеИтога = 0;
	
	Для каждого ОписаниеИтоговТабличнойЧасти Из КоллекцияИтогов Цикл
		
		ДанныеТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеИтоговТабличнойЧасти.ПутьКДанным);;
		Для каждого ОписаниеКолонки Из ОписаниеИтоговТабличнойЧасти.ОписанияРеквизитов Цикл
			
			ИтогПоКолонке = ДанныеТабличнойЧасти.Итог(ОписаниеКолонки.ИмяРеквизита);
			Если ИтогПоКолонке <> 0 Тогда
				
				Итог = Итог + ИтогПоКолонке;
				
				ПредставлениеИтогаПоКолонке = Формат(ИтогПоКолонке, "ЧЦ=15; ЧДЦ=2");
				
				ОписаниеПодсказки = Новый Структура;
				ОписаниеПодсказки.Вставить("ПредставлениеИтога", ПредставлениеИтогаПоКолонке);
				
				ДлинаПояснения = СтрДлина(ОписаниеКолонки.Пояснение);
				ДлинаПредставленияИтога = СтрДлина(ПредставлениеИтогаПоКолонке);
				
				ОписаниеПодсказки.Вставить("ОбщаяДлина",  ДлинаПояснения + ДлинаПредставленияИтога);
				
				МаксимальнаяДлиннаПояснения = Макс(МаксимальнаяДлиннаПояснения, ДлинаПояснения);
				МаксимальнаяДлиннаПредставлениеИтога = Макс(МаксимальнаяДлиннаПредставлениеИтога, ДлинаПредставленияИтога);
				
				СписокПодсказок.Добавить(ОписаниеПодсказки, ОписаниеКолонки.Пояснение);
					
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	СписокПодсказок.СортироватьПоПредставлению();
	
	МаксимальнаяОбщаяДлинаПредставления = МаксимальнаяДлиннаПояснения + МаксимальнаяДлиннаПредставлениеИтога;
	ШаблонПробелов = "                               ";
	Для каждого ОписаниеПодсказки Из СписокПодсказок Цикл
		
		ТекстПодсказки = ?(ПустаяСтрока(ТекстПодсказки), "", ТекстПодсказки + Символы.ПС)
			+ ОписаниеПодсказки.Представление + ": "
			+ Лев(ШаблонПробелов, (МаксимальнаяОбщаяДлинаПредставления - ОписаниеПодсказки.Значение.ОбщаяДлина))
			+ ОписаниеПодсказки.Значение.ПредставлениеИтога;
			
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ИмяРеквизитаИтог, Итог);
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяРеквизитаИтог, ТекстПодсказки);
		
КонецПроцедуры

Процедура УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяЭлемента, ТекстПодсказки) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм КлючевыеРеквизитыЗаполненияФормы
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
//

// Процедура определяет нужно ли отображать предупреждение при редактировании для ключевых реквизитов формы.
Процедура КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображатьПредупреждение = Неопределено, МассивОписанийРеквизитов = Неопределено, МассивИменТаблиц = Неопределено) Экспорт
	
	Если ОтображатьПредупреждение = Неопределено Тогда
		Если МассивИменТаблиц = Неопределено Тогда 
			МассивИменТаблиц = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
		КонецЕсли;	
		ОтображатьПредупреждение = КлючевыеРеквизитыЗаполненияФормыОтображатьПредупреждениеПриРедактировании(Форма, МассивИменТаблиц);
	КонецЕсли;
	
	Если МассивОписанийРеквизитов = Неопределено Тогда 
		МассивОписанийРеквизитов = Форма.КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов();
	КонецЕсли;	
	Для каждого Описание Из МассивОписанийРеквизитов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Описание.ЭлементФормы,
			"ОтображениеПредупрежденияПриРедактировании",
			ОтображатьПредупреждение);
	КонецЦикла;
КонецПроцедуры

// Функция определяет есть ли данные в таблицах документа, подключенных к механизму.
Функция КлючевыеРеквизитыЗаполненияФормыОтображатьПредупреждениеПриРедактировании(Форма, МассивИменТаблиц)
	ОтображатьПредупреждениеПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицы);
		Если Таблица.Количество() > 0 Тогда
			ОтображатьПредупреждениеПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ОтображатьПредупреждениеПриРедактировании;
КонецФункции

#КонецОбласти

// Переносит отборы, переданные в параметрах открытия формы динамического списка
// в пользовательские настройки.
//
// Параметры:
//		ДинамическийСписок	- ДинамическийСписок, реквизит формы.
//		Параметры			- Структура, параметры формы динамического списка.
//
Процедура НастроитьОтборыПараметровФормыСписка(ДинамическийСписок, Параметры) Экспорт
	
	Для каждого ОписаниеОтбора Из Параметры.Отбор Цикл
		
		// Проверка существования поля отбора.
		Если ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(
				Новый ПолеКомпоновкиДанных(ОписаниеОтбора.Ключ)) = Неопределено Тогда
				
			Продолжить;
			
		КонецЕсли; 
		
		Представление = Неопределено;
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		
		// Определение представления и режима отображения существующего элемента отбора.
		ЭлементыОтбораДинамическогоСписка = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор, ОписаниеОтбора.Ключ);
			
		Если ЭлементыОтбораДинамическогоСписка.Количество() > 0 Тогда
			Представление = ЭлементыОтбораДинамическогоСписка[0].Представление;
			РежимОтображения = ЭлементыОтбораДинамическогоСписка[0].РежимОтображения;
		КонецЕсли; 
		
		// Определение параметров отбора, содержащих коллекции значений.
		ЗначениеОтбора = ОписаниеОтбора.Значение;
		ТипЗначения = ТипЗнч(ЗначениеОтбора);
		Если ТипЗначения = Тип("Массив")
			ИЛИ ТипЗначения = Тип("ФиксированныйМассив")
			ИЛИ ТипЗначения = Тип("СписокЗначений") Тогда
			
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.ВСписке;
			
			Если ТипЗначения = Тип("Массив")
				ИЛИ ТипЗначения = Тип("ФиксированныйМассив") Тогда
				
				СписокЗначенийОтбора = Новый СписокЗначений;
				Если ТипЗначения = Тип("Массив") Тогда
					СписокЗначенийОтбора.ЗагрузитьЗначения(ЗначениеОтбора);
				Иначе
					СписокЗначенийОтбора.ЗагрузитьЗначения(Новый Массив(ЗначениеОтбора));
				КонецЕсли;
				
				ЗначениеОтбора = СписокЗначенийОтбора;
				
			КонецЕсли;
			
		Иначе
			ВидСравненияЗначения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		// Установка параметра отбора
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор,
			ОписаниеОтбора.Ключ,
			ЗначениеОтбора,
			ВидСравненияЗначения,
			Представление,
			Истина,
			РежимОтображения);
			
		// Удаление, настроенного параметра отбора.
		Параметры.Отбор.Удалить(ОписаниеОтбора.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

#Область УправлениеОтборамиВФормахСДинамическимСписком

// Обновляется надпись не доступных отборов пользователю
//
// Параметры:
//		Форма - Форма с динамическим списком
//		ИсключаемыеИменаОтборов - Строка - Имена отборов, исключаемых из надписи, разделенные запятой
//
Процедура ОбновитьНадписьФиксированногоОтбора(Форма) Экспорт
	
	СписокНастройкиОтбораНадпись = "";
	
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	
	ПользовательскийОтборДоступен = Ложь;
	Для каждого НастройкаКомпоновщика Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			ПользовательскийОтборДоступен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИменаИсключаемыхОтборов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Форма.ИсключаемыеИменаОтборов, " ",""), ",");
	КоллекцияОтборов = ФиксированныйОтборДинамическогоСписка(Форма, Список);
	Для каждого СоответствиеЭлементаОтбора Из КоллекцияОтборов Цикл
		ЭлементОтбора = СоответствиеЭлементаОтбора.Значение;
		Если Не Форма.ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			// Не выводим отбор по организации при однофирменном учете
			Продолжить;
		КонецЕсли;
		Если ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПользовательскийОтборДоступен Или ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			ДополнитьНадписьНастроекОтбораДинамическогоСписка(
				ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора),
				СписокНастройкиОтбораНадпись, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	Форма.СписокНастройкиОтбораНадпись = СписокНастройкиОтбораНадпись;
	
	// Если нет скрытых отборов, то и элементы не нужно выводить на форму
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СписокНастройкиОтбораНадпись", "Видимость", Не ПустаяСтрока(СписокНастройкиОтбораНадпись));
	
КонецПроцедуры

// Возвращает не доступные пользователю отборы
//
// Параметры:
//		Форма - Форма с динамическим списком
//		Список - Реквизит формы "Динамический список"
//
// Возвращаемое значение:
//		КоллекцияОтборов - Соответствие
//				Ключ - Поле компоновки данных
//				Значение - Элемент отбора компоновки данных или структура, соответствующая свойствам элементу отбора компоновки данных
//
Функция ФиксированныйОтборДинамическогоСписка(Форма, Список) Экспорт
	
	КоллекцияОтборов = Новый Соответствие;
	
	ИменаИсключаемыхОтборов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Форма.ИсключаемыеИменаОтборов, " ",""), ",");
	
	// Все, что находится в Параметры.Отбор потом перенесется в ФиксированныеНастройки, поэтому все отборы недоступны пользователю.
	Если Форма.Параметры.Свойство("Отбор") Тогда
		Для Каждого ЭлементОтбора Из Форма.Параметры.Отбор Цикл
			СтруктураЗначенияОтбора = Новый Структура;
			СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ));
			СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			СтруктураЗначенияОтбора.Вставить("Использование", Истина);
			СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", ЭлементОтбора.Значение);
			СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			СтруктураЗначенияОтбора.Вставить("Представление", ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора.Ключ));
			КоллекцияОтборов.Вставить(Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ), СтруктураЗначенияОтбора);
		КонецЦикла;
	КонецЕсли;
	
	// Фиксированные настройки все недоступны пользователю
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование
			Или ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.Представление);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", Истина);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				СтруктураЗначенияОтбора.Вставить("Представление", "");
				СтруктураЗначенияОтбора.Вставить("ЭтоГруппа", Истина);
				КоллекцияОтборов.Вставить(ЭлементОтбора.Представление, СтруктураЗначенияОтбора);
			Иначе
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.ЛевоеЗначение);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ЭлементОтбора.ВидСравнения);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", ЭлементОтбора.ПравоеЗначение);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
				СтруктураЗначенияОтбора.Вставить("Представление", ЭлементОтбора.Представление);
				КоллекцияОтборов.Вставить(ЭлементОтбора.ЛевоеЗначение, СтруктураЗначенияОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Настройки отбора, указанные для списка, могут быть доступные пользователю
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование
			Или Не ПустаяСтрока(ЭлементОтбора.ИдентификаторПользовательскойНастройки)
			Или ИменаИсключаемыхОтборов.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				СтруктураЗначенияОтбора = Новый Структура;
				СтруктураЗначенияОтбора.Вставить("ЛевоеЗначение", ЭлементОтбора.Представление);
				СтруктураЗначенияОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
				СтруктураЗначенияОтбора.Вставить("Использование", ЭлементОтбора.Использование);
				СтруктураЗначенияОтбора.Вставить("ПравоеЗначение", Истина);
				СтруктураЗначенияОтбора.Вставить("РежимОтображения", ЭлементОтбора.РежимОтображения);
				СтруктураЗначенияОтбора.Вставить("Представление", "");
				СтруктураЗначенияОтбора.Вставить("ЭтоГруппа", Истина);
				КоллекцияОтборов.Вставить(ЭлементОтбора.Представление, СтруктураЗначенияОтбора);
			Иначе
				КоллекцияОтборов.Вставить(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоллекцияОтборов;
	
КонецФункции

// Возвращает пользовательское представление идентификатора
//
// Параметры:
//		ИмяБезПробелов - Идентификатор, по которому требуется получить представление
//
// Возвращаемое значение:
//		ПредставлениеЭлементаОтбора - Строка - Пользовательское представление идентификатора
//
Функция ПредставлениеИмениБезПробелов(ИмяБезПробелов) Экспорт
	
	ПредставлениеЭлементаОтбора = "";
	БылВРег = Ложь;
	Для НомСимвола = 1 По СтрДлина(ИмяБезПробелов) Цикл
		Символ = Сред(ИмяБезПробелов, НомСимвола, 1);
		СледующийСимволВРег = Ложь;
		Если НомСимвола + 1 <= СтрДлина(ИмяБезПробелов) Тогда
			СледующийСимвол = Сред(ИмяБезПробелов, НомСимвола + 1, 1);
			СледующийСимволВРег = СледующийСимвол = ВРег(СледующийСимвол);
		КонецЕсли;
		ЭтоВРег = Символ = ВРег(Символ);
		Если Не БылВРег И ЭтоВРег И Не НомСимвола = 1 Тогда
			Если СледующийСимволВРег Тогда
				Символ = " " + ВРег(Символ);
			Иначе
				Символ = " " + НРег(Символ);
			КонецЕсли;
		КонецЕсли;
		БылВРег = ЭтоВРег;
		ПредставлениеЭлементаОтбора = ПредставлениеЭлементаОтбора + Символ;
	КонецЦикла;
	
	Возврат ПредставлениеЭлементаОтбора;
	
КонецФункции

Процедура ДополнитьНадписьНастроекОтбораДинамическогоСписка(НаименованиеЭлементаОтбора, СписокНастройкиОтбораНадпись, ЭлементОтбора)
	
	Если Не ЭлементОтбора.Использование Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЭлементаОтбора = НаименованиеЭлементаОтбора;
	
	ПравоеЗначениеОтбора = ЭлементОтбора.ПравоеЗначение;
	Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("Дата") Тогда
		ПравоеЗначениеОтбора = Формат(ПравоеЗначениеОтбора, "ДЛФ=DD");
	КонецЕсли;
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Структура") И ЭлементОтбора.Свойство("ЭтоГруппа") И ЭлементОтбора.ЭтоГруппа = Истина Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("ФиксированныйМассив") Или ТипЗнч(ПравоеЗначениеОтбора) = Тип("Массив") Тогда
			Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
				ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 в списке:%2';uk='%1 у списку:%2'"),
					ТекстЭлементаОтбора,
					?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru='отобрано по нескольким значениям';uk='відібрано по декільком значенням'"), ПравоеЗначениеОтбора[0]));
			КонецЕсли;
		Иначе
			ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: %2';uk='%1: %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 > %2';uk='%1 > %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 >= %2';uk='%1 >= %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 в иерархии %2';uk='%1 в ієрархії %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 в списке:%2';uk='%1 у списку:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru='отобрано по нескольким значениям';uk='відібрано по декільком значенням'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 в списке по иерархии:%2';uk='%1 у списку по ієрархії:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru='отобрано по нескольким значениям';uk='відібрано по декільком значенням'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 заполнено';uk='%1 заповнено'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 < %2';uk='%1 < %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 <= %2';uk='%1 <= %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 начинается с %2';uk='%1 починається з %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не в иерархии %2';uk='%1 не в ієрархії %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 не в списке:%2';uk='%1 не у списку:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru='отобрано по нескольким значениям';uk='відібрано по декільком значенням'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Если ПравоеЗначениеОтбора.Количество() > 0 Тогда
			ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 не в списке по иерархии:%2';uk='%1 не у списку по ієрархії:%2'"),
				ТекстЭлементаОтбора,
				?(ПравоеЗначениеОтбора.Количество() > 1, НСтр("ru='отобрано по нескольким значениям';uk='відібрано по декільком значенням'"), ПравоеЗначениеОтбора[0]));
		КонецЕсли;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не заполнено';uk='%1 не заповнено'"), ТекстЭлементаОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не начинается с %2';uk='%1 не починається з %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не содержит %2';uk='%1 не містить %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 <> %2';uk='%1 <> %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не содержит %2';uk='%1 не містить %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 содержит %2';uk='%1 містить %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		ТекстЭлементаОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 содержит %2';uk='%1 містить %2'"), ТекстЭлементаОтбора, ПравоеЗначениеОтбора);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстРазделителя = ?(ПустаяСтрока(СписокНастройкиОтбораНадпись), "", "; ");
	СписокНастройкиОтбораНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2%3';uk='%1%2%3'"), СписокНастройкиОтбораНадпись, ТекстРазделителя, ТекстЭлементаОтбора);
	
КонецПроцедуры

Функция ПредставлениеЭлементаОтбораДинамическогоСписка(Форма, ЭлементОтбора)
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Строка") Тогда
		НаименованиеОтбора = ЭлементОтбора;
	Иначе
		ПредставлениеЭлементаОтбора = ЭлементОтбора.Представление;
		Если Не ПустаяСтрока(ПредставлениеЭлементаОтбора) Тогда
			Возврат ПредставлениеЭлементаОтбора;
		КонецЕсли;
		
		ЛевоеЗначениеОтбора = ЭлементОтбора.ЛевоеЗначение;
		
		НаименованиеОтбора = Строка(ЛевоеЗначениеОтбора);
	КонецЕсли;
		
	Если НаименованиеОтбора = "Тип" Тогда
		Возврат НСтр("ru='Тип документа';uk='Тип документа'");
	КонецЕсли;
	
	ПутьКДаннымЭлементаФормы = Форма.НаименованиеРеквизитаФормыДинамическийСписок + "." + НаименованиеОтбора;
	ЭлементСписка = Форма.СинонимыЭлементовОтбора.НайтиПоЗначению(ПутьКДаннымЭлементаФормы);
	Если ЭлементСписка <> Неопределено И Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	ЭлементСписка = Форма.СинонимыЭлементовОтбора.НайтиПоЗначению(НаименованиеОтбора);
	Если ЭлементСписка <> Неопределено И Не ПустаяСтрока(ЭлементСписка.Представление) Тогда
		Возврат ЭлементСписка.Представление;
	КонецЕсли;
	
	Возврат ПредставлениеИмениБезПробелов(НаименованиеОтбора);
	
КонецФункции

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  КомпоновщикНастроек - Компоновщик настроек динамического списка.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
Функция НайтиЭлементыИГруппыОтбора(Знач КомпоновщикНастроек,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(КомпоновщикНастроек.Настройки.Отбор.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	НайтиРекурсивно(КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	Для каждого НастройкаКомпоновщика Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
			НайтиРекурсивно(НастройкаКомпоновщика.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДатаОтсчетаПериодическихСведений() Экспорт
	
	Возврат '18991231000000';
	
КонецФункции

Функция ДатаОтсчетаПериодическихСведенийСПериодомМесяц() Экспорт
	
	Возврат КонецМесяца(ДатаОтсчетаПериодическихСведений()) + 1;
	
КонецФункции

Функция СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента)
	
	СтруктураСоответствия = Новый Структура();
		СтруктураСоответствия.Вставить("Фамилия", "Фамилия");
		СтруктураСоответствия.Вставить("Имя", "Имя");
		СтруктураСоответствия.Вставить("Отчество", "Отчество");
		СтруктураСоответствия.Вставить("Пол", "Пол");	
		СтруктураСоответствия.Вставить("ДатаРождения", "ДатаРождения");
		СтруктураСоответствия.Вставить("МестоРождения", "МестоРождения");
		СтруктураСоответствия.Вставить("МестоРожденияПредставление", "МестоРожденияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "АдресРегистрацииПредставление");
		СтруктураСоответствия.Вставить("АдресФактическийПредставление", "АдресФактическийПредставление");
		СтруктураСоответствия.Вставить("АдресДляИнформированияПредставление", "АдресДляИнформированияПредставление");
		СтруктураСоответствия.Вставить("АдресРегистрации", "АдресРегистрации");
		СтруктураСоответствия.Вставить("АдресФактический", "АдресФактический");
		СтруктураСоответствия.Вставить("АдресДляИнформирования", "АдресДляИнформирования");
		СтруктураСоответствия.Вставить("Гражданство", "Гражданство");
		СтруктураСоответствия.Вставить("Телефоны", "Телефоны");
		СтруктураСоответствия.Вставить("ИНН", "ИНН");
		
	
	СтруктураСоответствия.Вставить("ВидДокумента", "ВидДокумента");
	СтруктураСоответствия.Вставить("Серия", "СерияДокумента");
	СтруктураСоответствия.Вставить("Номер", "НомерДокумента");
	СтруктураСоответствия.Вставить("ДатаВыдачи", "ДатаВыдачи");
	СтруктураСоответствия.Вставить("КемВыдан", "КемВыдан");
	СтруктураСоответствия.Вставить("СтатусНалогоплательщика", "СтатусНалогоплательщика");
	
	Возврат СтруктураСоответствия;
	
КонецФункции

// Процедура вызывается в форме, содержащей данные физического лица при изменении данных физического лица.
// Например, для отработки оповещения о записи нового состояния физлица.
// Параметры:
//		Объект - данные формы в которой выполняется редактирование.
//		ДанныеФизическогоЛица - новое состояние физического лица. Структура с полями, совпадающими по именам с полями
//		                        данных формы.
//
Процедура ОбработкаИзмененияДанныхФизическогоЛица(Объект, ДанныеФизическогоЛица, СтрокиПоСотруднику, Модифицированность = Ложь) Экспорт
	Перем ИмяПоляВДокументе, ЗначениеСвойстваСотрудника;
	ТипДокумента = ТипЗнч(Объект.Ссылка);
	
	СоответствиеДанных = СоответствиеДанныхФизЛицаДаннымДокумента(ТипДокумента);
	Для Каждого СтрокаСотрудника Из СтрокиПоСотруднику Цикл
		Для Каждого КлючЗначение Из ДанныеФизическогоЛица Цикл
			Если СоответствиеДанных.Свойство(КлючЗначение.Ключ, ИмяПоляВДокументе) Тогда
				
				ДанныеСтрокиСотрудника = Новый Структура;
				ДанныеСтрокиСотрудника.Вставить(ИмяПоляВДокументе);
				ЗаполнитьЗначенияСвойств(ДанныеСтрокиСотрудника, СтрокаСотрудника);
				Если ДанныеСтрокиСотрудника[ИмяПоляВДокументе] <> Неопределено Тогда
					Если ЗначениеСвойстваСотрудника <> КлючЗначение.Значение Тогда
						Модифицированность = Истина;
						СтрокаСотрудника[ИмяПоляВДокументе] = КлючЗначение.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
