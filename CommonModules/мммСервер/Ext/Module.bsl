#Область ПрограммныйИнтерфейс

// Функция - Запрос прокси
// 
// Возвращаемое значение:
//  Стукрура - структура с параметрами ТекстЗапроса, Параметры
//
Функция ЗапросПрокси() Экспорт
	
	Возврат Новый Структура("ТекстЗапроса, Параметры", "", Новый Структура);
	
КонецФункции	

// Функция - Получить прокси
//
// Параметры:
//  Сервер		 - Строка	 - 
//  База		 - Строка	 - 
//  Пользователь - Строка	 - 
//  Пароль		 - Строка	 - 
// 
// Возвращаемое значение:
// 	WSПрокси
//
Функция ПолучитьПрокси(Сервер, База, Пользователь = "Robot", Пароль = "bot") Экспорт
	
	ПараметрыПрокси = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПрокси.АдресWSDL = "http://"+Сервер+"/"+База+"/ws/MMMservice.1cws?wsdl";
	ПараметрыПрокси.URIПространстваИмен = "http://www.1c.ru";
	ПараметрыПрокси.ИмяСервиса = "MMMservice";
	ПараметрыПрокси.Пароль = Пароль;
	ПараметрыПрокси.ИмяПользователя = Пользователь;
	ПараметрыПрокси.ИмяСервиса = "MMMservice";
	ПараметрыПрокси.Таймаут = Константы.ТаймаутПодключенияКВебсервису.Получить();
	ПараметрыПрокси.Местоположение = "http://"+Сервер+"/"+База+"/ws/MMMservice.1cws";
	  
	Возврат ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПрокси);	
	
КонецФункции

// Функция - Сериализовать
//
// Параметры:
//  Об	 - Объект	 - 
// 
// Возвращаемое значение:
//   Строка 
//
Функция Сериализовать(Об) Экспорт
	
	Возврат СериализоватьВСтрокуJSON(Об);
	
КонецФункции

// Функция - Де сериализовать
//
// Параметры:
//  Стр	 - Строка	 - 
// 
// Возвращаемое значение:
//   Объект 
//
Функция ДеСериализовать(Стр) Экспорт
	
	Возврат ДеСериализоватьИзСтрокиJSON(Стр);
	
КонецФункции	

// Функция - Получить таблицу серверов
//
// Параметры:
//  Период			 - Дата - Период актуальности
//  ОтборОрганизация - СправочникСсыка.Организации, Массив - 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - 
//
Функция ПолучитьТаблицуСерверов(Период, ОтборОрганизация = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст = "ВЫБРАТЬ
		|	РасположениеФирм.Сервер КАК Сервер,
		|	РасположениеФирм.ИмяБазы КАК База,
		|	РасположениеФирм.Организация,
		|	ИСТИНА КАК Пометка,
		|	РасположениеФирм.Логин КАК Пользователь,
		|	РасположениеФирм.Пароль КАК Пароль
		|ИЗ
		|	РегистрСведений.РасположениеФирм.СрезПоследних(&Период) КАК РасположениеФирм
		|
		|СГРУППИРОВАТЬ ПО
		|	РасположениеФирм.Сервер,
		|	РасположениеФирм.ИмяБазы,
		|	РасположениеФирм.Организация,
		|	РасположениеФирм.Логин,
		|	РасположениеФирм.Пароль";

	Если НЕ ОтборОрганизация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасположениеФирм.СрезПослених(&Период)", "РасположениеФирм.СрезПослених(&Период, Организация В (&Организация))");
		Запрос.УстановитьПараметр("Организация", ОтборОрганизация);
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПрочитатьФайлНаСервере(АдресФайла, ТабДок, РасширениеФайла) Экспорт
		
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(".xls");
	
	Если НЕ ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Возврат Ложь;
	КонецЕсли;	
		
	ДвоичныеДанные.Записать(ПолноеИмяФайла);	
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Очистить();
	Попытка
		ТабДок.Прочитать(ПолноеИмяФайла);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПодключитьсяКБазеМММКлиент(Пользователь = "Robot", Пароль = "bot") Экспорт	
	
	ПутьКБазе = мммСервер.ЗначениеКонстанты("ПутьКБазеМММ");
	Если ПустаяСтрока(ПутьКБазе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		//База = Новый COMОбъект("v77.Application");
		База = Новый COMОбъект("V1СEnterprise.Application");
	Исключение
		ЗаписьЖурналаРегистрации("Подключение к 1с7", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	СтрокаПодключения = "/D""" + СокрЛП(ПутьКБазе) + """ /N""" + СокрЛП(Пользователь) + """ /P""" + СокрЛП(Пароль) + """";
	
	// Попітка 1
	РезультатПодключения = База.Initialize(База.RMTrade, СтрокаПодключения, "NO_SPLASH_SHOW");
	Если РезультатПодключения Тогда
		Возврат База;
	КонецЕсли;
	
	// Попітка 2
	РезультатПодключения = База.Initialize(База.RMTrade, СтрокаПодключения, "NO_SPLASH_SHOW");
	Если РезультатПодключения Тогда
		Возврат База;
	КонецЕсли;
	
	Возврат Неопределено; 
	
КонецФункции

Функция УдалитьДублиСтрокТаблицыЗначений(Таблица, Колонки = "") Экспорт

	Если ПустаяСтрока(Колонки) Тогда
		
		// Просто свернем таблицу по всем колонкам
		
		Для каждого Колонка Из Таблица.Колонки Цикл
			Колонки = Колонки + ?(ПустаяСтрока(Колонки), "", ",") + Колонка.Имя;
		КонецЦикла;
		
		ТаблицаРезультат = Таблица.Скопировать();
		ТаблицаРезультат.Свернуть(Колонки);
		
	Иначе
		
		КолонкиЗапроса = "ТЗ." + СтрЗаменить(Колонки, ",", ",ТЗ.");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	" + КолонкиЗапроса + "
					   |ПОМЕСТИТЬ ВТ_ТЗ
					   |ИЗ
					   |	&ТЗ КАК ТЗ
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////
					   |ВЫБРАТЬ РАЗЛИЧНЫЕ
					   |	" + СтрЗаменить(КолонкиЗапроса, "ТЗ.", "ВТ_ТЗ.") + "
					   |ИЗ
					   |	ВТ_ТЗ КАК ВТ_ТЗ
					   |";

		Запрос.УстановитьПараметр("ТЗ", Таблица);
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		ТаблицаРезультат = Таблица.СкопироватьКолонки();
		Для каждого СтрокаТЗ Из ТаблицаЗапроса Цикл
		
			СтруктураОтбора = Новый Структура(Колонки);
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЗ);
			
			РезультатОтбора = Таблица.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаОтбора Из РезультатОтбора Цикл
				
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтбора);
				Прервать;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультат;

КонецФункции // УдалитьДублиСтрокТаблицыЗначений()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции	

Функция СериализоватьВСтрокуJSON(Об)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	параметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(параметрыЗаписиJSON);
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Об, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции


Функция ДеСериализоватьИзСтрокиJSON(Стр)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Стр);
	Данные = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

Процедура ВнешниеНаборыДанныхЗапускВыполнения(Параметры, АдресХранилища) Экспорт
	
	Результат = Отчеты.ВНД.ВнешниеНаборыДанных(Параметры.ДатаНач, Параметры.ДатаКон, Параметры.Организация);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры
