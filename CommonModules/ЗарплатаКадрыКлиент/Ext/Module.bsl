
#Область ПрограммныйИнтерфейс

// Выполняет необходимые проверки и запросы пользователю перед записью организации.
// При ответе пользователя о необходимости обработки вызывает сервер.
// Параметры:
//	ДанныеОрганизации - данные формы, соответствующие Организации.
//	Форма - форма справочника
//	Отказ - признак отказа от записи.
//	ОповещениеЗавершения - описание оповещения, выполняемого после завершения процедуры.
Процедура ФормаОрганизацииПередЗаписью(ДанныеОрганизации, Форма, Отказ, ОповещениеЗавершения = Неопределено, ЗакрытьПослеЗаписи = Истина) Экспорт
	
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ОбработкаОповещения
// формы организации.
Процедура ОрганизацииФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	
КонецПроцедуры

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Печать) 
//	 
//Процедура ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
//	ЗарплатаКадрыКлиентВнутренний.ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка);		
//КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить) 
//	 
//Процедура ВыгрузитьДокументОтчетности(Ссылка) Экспорт
//	ЗарплатаКадрыКлиентВнутренний.ВыгрузитьДокументОтчетности(Ссылка);	
//КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект) 
//	 
//Процедура СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка) Экспорт
//	ЗарплатаКадрыКлиентВнутренний.СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка);	
//КонецПроцедуры	

// Открывает в качестве расшифровки переданной ячейки предварительно подготовленный вариант отчета.
// Параметры:
//	ИДОтчета - Строка - идентификатор отчета (совпадает с именем объекта метаданных).
// 	ИДРедакцииОтчета - Строка - идентификатор редакции формы отчета (совпадает с именем формы объекта метаданных).
//  ИДИменПоказателей - Массив - массив идентификаторов имен показателей, по которым формируется расшифровка.
//  ПараметрыОтчета - Структура - структура параметров отчета, необходимых для формирования расшифровки.
// 
//Процедура ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
//	ЗарплатаКадрыКлиентВнутренний.ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
//КонецПроцедуры

// Запускает фоновое задание, восстанавливающее начальные значения законодательных классификаторов.
//
// Параметры:
//		Форма - УправляемаяФорма, в которой расположена команда вызывающая команда.
//
Процедура ВосстановитьНачальныеЗначения(Форма) Экспорт
	
	ДополнительныеСвойства = Новый Структура("Форма,ИменаОбъектовМетаданных", Форма, "");
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияЗавершение", ЭтотОбъект, ДополнительныеСвойства);
	
	ТекстВопроса = НСтр("ru='При восстановлении начальных значений, в справочниках будет произведен поиск и пометка на удаление
        |задвоенных элементов, замена ссылок помеченных на удаление элементов, создание недостающих элементов, выполнена очистка
        |наборов записей регистров сведений и произведено заполнение регистров заново.
        |
        |Восстановить начальные значения?'
        |;uk='При відновленні початкових значень, в довідниках буде проведений пошук та помітка на видалення
        |задвоенных елементів, заміна посилань позначених на видалення елементів, створення відсутніх елементів, виконано очищення
        |наборів записів регістрів відомостей та виконано заповнення регістрів заново.
        |
        |Відновити початкові значення?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Вызывается при нажатии на гиперссылку или двойном щелчке на ячейке 
// табличного документа с описанием изменений системы.
//
// Параметры:
//   Область - ОбластьЯчеекТабличногоДокумента - область документа, на 
//             которой произошло нажатие.
//
// См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриНажатииНаГиперссылкуВДокументеОписанияОбновлений(Знач Область) Экспорт

КонецПроцедуры


// Обработчик, вызываемый при начале работы системы.
//
// Параметры:
//		Параметры - описание см ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПереносДанныхБухгалтерия3Зарплата3") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ПереносДанныхБухгалтерия3Зарплата3Клиент");
		Модуль.ПриНачалеРаботыСистемы(Параметры);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Подключает обработчик ожидания перед запуском обработчика события (активизация строки списка, запуск расчета и др.).
//
// Параметры:
//		Форма
//		ИмяОбработчикаОжидания
//		ФлагНеобходимостиОбработкиСобытия - Булево, используется, когда форме нужно выполнить какие то действия
//					в обработчике перед записью или при активизации другой строки списка.
//
Процедура ПодключитьОбработчикОжиданияОбработкиСобытия(Форма, ИмяОбработчикаОжидания, ФлагНеобходимостиОбработкиСобытия = Неопределено) Экспорт
	
	ПериодОжидания = ПериодОжиданияЗапускаОбработчикаСобытия();
	Если ПериодОжидания > 0 Тогда
		Форма.ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, ПериодОжидания, Истина);
	КонецЕсли; 
	
	ФлагНеобходимостиОбработкиСобытия = Истина;
		
КонецПроцедуры

// Проверяет заполнение реквизита "Организация" у переданного объекта.
// 
// Параметры:
//	ПроверяемыйОбъект	- проверяемое, любой объект, допускающий доступ к полям по имени
//	                      и имеющий свойство Организация.
//								
//	Возвращаемое значение:
//		Булево. Истина - организация заполнена, Ложь - в противном случае. 
//			
//Функция ОрганизацияЗаполнена(ПроверяемыйОбъект) Экспорт
//	
//	ПравилаПроверки = Новый Структура("Организация");
//	
//	ОрганизацияЗаполнена =  ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(ПроверяемыйОбъект, ПравилаПроверки, Ложь);
//	
//	Если Не ОрганизацияЗаполнена Тогда
//		ПоказатьПредупреждение(, НСтр("ru='Для заполнения документа необходимо выбрать организацию.';uk='Для заповнення документа необхідно вибрати організацію.'"), , НСтр("ru='Ошибка заполнения';uk='Помилка заповнення'"));
//	КонецЕсли;
//	
//	Возврат ОрганизацияЗаполнена;
//	
//КонецФункции

// Обработчики событий поля ввода.

Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////

// Обработчик события, связанного с редактированием места рождения.
// Событие НачалоВыбора в поля место рождения в таблице.
Процедура МестоРожденияВТаблицеНачалоВыбора(МестоРождения, МестоРожденияПредставление, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", МестоРождения);
	
	Оповещение = Новый ОписаниеОповещения("МестоРожденияВТаблицеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВводМестаРождения", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

//Процедура МестоРожденияВТаблицеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ДанныеМестаРождения = Неопределено;
//	
//	Если Результат <> Неопределено Тогда
//		ДанныеМестаРождения = Новый Структура;
//		ДанныеМестаРождения.Вставить("МестоРождения", Результат);
//		ДанныеМестаРождения.Вставить("МестоРожденияПредставление", ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(Результат));
//	КонецЕсли;	
//	
//	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
//		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДанныеМестаРождения);
//	КонецЕсли;
//	
//КонецПроцедуры

// Редактирование данных физического лица.
Процедура ОткрытьФормуФизическогоЛицаДляРедактирования(ФизическоеЛицо, ИмяЭлемента) Экспорт 
	
	СтруктураСоответствияПолей = СоответствиеПолейФормыДокументаПолямФормыФизическогоЛица();
	Параметры = Новый Структура("Ключ, ТекущийЭлемент", ФизическоеЛицо, СтруктураСоответствияПолей[ИмяЭлемента]);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Параметры);
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм КлючевыеРеквизитыЗаполненияФормы
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
//

// Процедура очищает таблицы формы подключенные к механизму.
Процедура КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(Форма) Экспорт
	МассивИменТаблиц = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицы);
		Таблица.Очистить();
	КонецЦикла; 
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
КонецПроцедуры

#КонецОбласти

#Область УправлениеОтборамиВФормахСДинамическимСписком

// Возвращает значения заполнения, передаваемые при создании нового документа из формы списка журнала
// см. описание ЗарплатаКадры.ДинамическийСписокПередНачаломДобавления
//
// Параметры:
//		Форма - Форма списка журнала документов
//		ПараметрыОткрытия - Структура, в которую будут добавлены значения для открытия нового документа
//		ТипДокумента - тип создаваемого документа
//
//Процедура ДинамическийСписокПередНачаломДобавления(Форма, ПараметрыОткрытия, ТипДокумента, ИмяПоляСотрудник = "Сотрудник", ИмяПоляФизическоеЛицо = "ФизическоеЛицо") Экспорт
//	
//	// Получим физическое лицо из параметров критерия отбора
//	Если Форма.ИспользоватьКритерийОтбора Тогда
//		НайденныеСтроки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ТипПараметра", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")));
//		
//		Если НайденныеСтроки.Количество() = 0 Тогда
//			ФизическоеЛицо = Неопределено;
//		Иначе
//			ФизическоеЛицо = Форма[НайденныеСтроки[0].ИмяРеквизитаФормыПараметра];
//		КонецЕсли;
//	Иначе
//		ФизическоеЛицо = Неопределено;
//	КонецЕсли;
//	
//	// Получим организацию, установленную в отборе
//	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
//	ПользовательскиеНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки;
//	ФиксированныеОтборы = ЗарплатаКадрыКлиентСервер.ФиксированныйОтборДинамическогоСписка(Форма, Список);
//	
//	ОрганизацияОтбора = Неопределено;
//	Для каждого НастройкаКомпоновщика Из ПользовательскиеНастройки.Элементы Цикл
//		Если ТипЗнч(НастройкаКомпоновщика) = Тип("ОтборКомпоновкиДанных") Тогда
//			Если НастройкаКомпоновщика.ДоступныеПоляОтбора = Неопределено Тогда
//				Продолжить;
//			КонецЕсли;
//			ДоступноеПолеВыбораОрганизация = НастройкаКомпоновщика.ДоступныеПоляОтбора.Элементы.Найти("Организация");
//			Если ДоступноеПолеВыбораОрганизация = Неопределено Или ДоступноеПолеВыбораОрганизация.Тип <> Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			Для каждого ЭлементОтбора Из НастройкаКомпоновщика.Элементы Цикл
//				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
//					Продолжить;
//				КонецЕсли;
//				Если ЭлементОтбора.ЛевоеЗначение = ДоступноеПолеВыбораОрганизация.Поле Тогда
//					ОрганизацияОтбора = ЭлементОтбора.ПравоеЗначение;
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//			Если ОрганизацияОтбора = Неопределено Тогда
//				ОрганизацияФиксированногоОтбора = ФиксированныеОтборы.Получить(ДоступноеПолеВыбораОрганизация.Поле);
//				Если ОрганизацияФиксированногоОтбора <> Неопределено Тогда
//					ОрганизацияОтбора = ФиксированныеОтборы.Получить(ДоступноеПолеВыбораОрганизация.Поле).ПравоеЗначение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ЗарплатаКадрыВызовСервера.ДинамическийСписокПередНачаломДобавления(ПараметрыОткрытия, ФизическоеЛицо, ОрганизацияОтбора, ТипДокумента, ИмяПоляСотрудник, ИмяПоляФизическоеЛицо);
//	
//КонецПроцедуры

#КонецОбласти

#Область ПредставленияОснованийУвольнения

Процедура ПредставленияОснованийУвольненияПредставлениеИспользоватьПриИзменении(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Форма.Представление.Использовать Тогда
		Элементы.ПредставлениеНаименование.Видимость = Истина;
		Элементы.ПредставлениеТекстОснования.Видимость = Истина;
		Элементы.Наименование.Видимость = Ложь;
		Элементы.ТекстОснования.Видимость = Ложь;
	Иначе
		Элементы.ПредставлениеНаименование.Видимость = Ложь;
		Элементы.ПредставлениеТекстОснования.Видимость = Ложь;
		Элементы.Наименование.Видимость = Истина;
		Элементы.ТекстОснования.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.Представление.Использовать
			И Не ЗначениеЗаполнено(Форма.Представление.Наименование)
			И Не ЗначениеЗаполнено(Форма.Представление.Текстоснования) Тогда
		Форма.Представление.Наименование = Форма.Объект.Наименование;
		Форма.Представление.ТекстОснования = Форма.Объект.ТекстОснования;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВосстановитьНачальныеЗначенияСправочника(Форма, ИменаОбъектовМетаданных) Экспорт
	
	ДополнительныеСвойства = Новый Структура("Форма,ИменаОбъектовМетаданных", Форма, ИменаОбъектовМетаданных);
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияЗавершение", ЭтотОбъект, ДополнительныеСвойства);
	
	ТекстВопроса = НСтр("ru='При восстановлении начальных значений будет произведен поиск и пометка на удаление
        |задвоенных элементов, замена ссылок помеченных на удаление элементов, создание недостающих элементов.
        |
        |Восстановить начальные значения?'
        |;uk='При відновленні початкових значень буде проведений пошук та помітка на видалення
        |задвоенных елементів, заміна посилань позначених на видалення елементів, створення відсутніх елементів.
        |
        |Відновити початкові значення?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ВосстановитьНачальныеЗначенияРегистраСведений(Форма, ИменаОбъектовМетаданных) Экспорт
	
	ДополнительныеСвойства = Новый Структура("Форма,ИменаОбъектовМетаданных", Форма, ИменаОбъектовМетаданных);
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияЗавершение", ЭтотОбъект, ДополнительныеСвойства);
	
	ТекстВопроса = НСтр("ru='При восстановлении начальных значений будет выполнена очистка записей
        |и произведено заполнение заново.
        |
        |Восстановить начальные значения?'
        |;uk='При відновленні початкових значень буде виконана очищення записів
        |і виконано заповнення заново.
        |
        |Відновити початкові значення?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

//Процедура ВосстановитьНачальныеЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если Результат <> КодВозвратаДиалога.Да Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	Форма 					= ДополнительныеПараметры.Форма;
//	ИменаОбъектовМетаданных = ДополнительныеПараметры.ИменаОбъектовМетаданных;
//	
//	Результат = ЗарплатаКадрыВызовСервера.ВосстановитьНачальныеЗначения(ИменаОбъектовМетаданных, Форма.УникальныйИдентификатор);
//	Если НЕ Результат.ЗаданиеВыполнено Тогда
//		
//		Форма.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
//		
//		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжидания);
//		ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(Форма, Форма.ИдентификаторЗадания);
//		ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал;
//		
//	Иначе
//		ТекущийИнтервал = 0.1;
//	КонецЕсли;
//	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеВыполненияДлительнойОперации", ТекущийИнтервал, Истина);
//	
//КонецПроцедуры

//Функция ВосстановлениеНачальныхЗначенийВыполнено(Форма) Экспорт
//	
//	ВосстановлениеВыполнено = Ложь;
//	
//	Попытка
//		
//		ФормаДлительнойОперации = ПолучитьФорму("ОбщаяФорма.ДлительнаяОперация");
//		
//		Если ФормаДлительнойОперации.Открыта() 
//			И ФормаДлительнойОперации.ИдентификаторЗадания = Форма.ИдентификаторЗадания Тогда
//			
//			Если ЗарплатаКадрыВызовСервера.ЗаданиеВыполнено(Форма.ИдентификаторЗадания) Тогда
//				
//				ВосстановлениеВыполнено = Истина;
//				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
//				
//			Иначе
//				
//				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжидания);
//				
//				Форма.ПодключитьОбработчикОжидания(
//					"Подключаемый_ОжиданиеВыполненияДлительнойОперации",
//					Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал,
//					Истина);
//					
//			КонецЕсли;
//				
//		Иначе
//			ВосстановлениеВыполнено = Истина;
//		КонецЕсли;
//		
//	Исключение
//		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
//		ВызватьИсключение;
//	КонецПопытки;
//	
//	Возврат ВосстановлениеВыполнено;
//	
//КонецФункции

// Возвращает период ожидания формы, перед запуском обработчиков событий.
//
Функция ПериодОжиданияЗапускаОбработчикаСобытия()
	
	ПериодОжидания = 0;
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПериодОжидания = 1;
	Иначе
		ПериодОжидания = 0.1;
	КонецЕсли;
	
	Возврат ПериодОжидания;
	
КонецФункции

Функция СоответствиеПолейФормыДокументаПолямФормыФизическогоЛица()
	
	СтруктураСоответствия = Новый Структура();
	СтруктураСоответствия.Вставить("Фамилия", "Наименование");
	СтруктураСоответствия.Вставить("Имя", "Наименование");
	СтруктураСоответствия.Вставить("Отчество", "Наименование");
	СтруктураСоответствия.Вставить("Пол", "ФизлицоПол");
	СтруктураСоответствия.Вставить("ДатаРождения", "ФизлицоДатаРождения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "ФизическоеЛицоМестоРождения");
	СтруктураСоответствия.Вставить("Гражданство", "ГражданствоФизическихЛицСтрана");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("Телефоны", "ГруппаКонтактнаяИнформация");	
	СтруктураСоответствия.Вставить("ДокументУдостоверяющийЛичность", "ДокументыФизическихЛицВидДокумента"); 
	
	Возврат СтруктураСоответствия;
	
КонецФункции


#Область ФормаОрганизацииПередЗаписью

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
Функция СписокМесяцевПоСтроке(Текст, КодЯзыка = "")
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
    Если КодЯзыка = "" Тогда 
		КодЯзыка = ЛокализацияПовтИсп.КодЯзыкаИнтерфейса();
	КонецЕсли;

	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "Л="+КодЯзыка+";ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "Л="+КодЯзыка+";ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено, КодЯзыка = "")
    Если КодЯзыка = "" Тогда 
		КодЯзыка = ЛокализацияПовтИсп.КодЯзыкаИнтерфейса();
	КонецЕсли;

	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст, КодЯзыка);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "Л="+КодЯзыка+";ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "Л="+КодЯзыка+";ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0], КодЯзыка);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "Л="+КодЯзыка+";ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "Л="+КодЯзыка+";ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

Процедура ПереназначитьФорматМесяцаЭлемента(Элемент, Формат = "", КодЯзыка = "") Экспорт
	
	Если Формат = "" Тогда 
		Формат = "ДФ='ММММ гггг'";
	КонецЕсли;
	
	Если КодЯзыка = "" Тогда 
		КодЯзыка = ЛокализацияПовтИсп.КодЯзыкаИнтерфейса();
	КонецЕсли;

	Элемент.Формат = "Л="+КодЯзыка+";"+Формат;
	
КонецПроцедуры	
#КонецОбласти